$date
	Tue May 17 20:15:18 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module RISC_V_Pr_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module RISCV $end
$var wire 64 # Adder1Out [63:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 $ zero $end
$var wire 5 % rs2 [4:0] $end
$var wire 5 & rs1 [4:0] $end
$var wire 64 ' result [63:0] $end
$var wire 5 ( rd [4:0] $end
$var wire 64 ) out1 [63:0] $end
$var wire 32 * instruction [31:0] $end
$var wire 64 + imm_data [63:0] $end
$var wire 7 , funct7 [6:0] $end
$var wire 3 - funct3 [2:0] $end
$var wire 64 . data_out_c2 [63:0] $end
$var wire 64 / data_out_c1 [63:0] $end
$var wire 64 0 data_out [63:0] $end
$var wire 1 1 RegWrite $end
$var wire 64 2 Read_Data [63:0] $end
$var wire 64 3 ReadData2 [63:0] $end
$var wire 64 4 ReadData1 [63:0] $end
$var wire 64 5 PC_Out [63:0] $end
$var wire 64 6 PC_In [63:0] $end
$var wire 4 7 Operation [3:0] $end
$var wire 7 8 Opcode [6:0] $end
$var wire 1 9 MemtoReg $end
$var wire 1 : MemWrite $end
$var wire 1 ; MemRead $end
$var wire 5 < MEM_WB_rd [4:0] $end
$var wire 64 = MEM_WB_WriteData [63:0] $end
$var wire 1 > MEM_WB_RegWrite $end
$var wire 64 ? MEM_WB_Read_Data [63:0] $end
$var wire 1 @ MEM_WB_MemtoReg $end
$var wire 64 A MEM_WB_ALU_Out [63:0] $end
$var wire 64 B IF_ID_PC_Out [63:0] $end
$var wire 4 C IF_ID_Instruction_EX [3:0] $end
$var wire 32 D IF_ID_Instruction [31:0] $end
$var wire 5 E ID_EX_rs2 [4:0] $end
$var wire 5 F ID_EX_rs1 [4:0] $end
$var wire 5 G ID_EX_rd [4:0] $end
$var wire 1 H ID_EX_RegWrite $end
$var wire 64 I ID_EX_ReadData2 [63:0] $end
$var wire 64 J ID_EX_ReadData1 [63:0] $end
$var wire 64 K ID_EX_PC_Out [63:0] $end
$var wire 1 L ID_EX_MemtoReg $end
$var wire 1 M ID_EX_MemWrite $end
$var wire 1 N ID_EX_MemRead $end
$var wire 4 O ID_EX_Instruction [3:0] $end
$var wire 64 P ID_EX_Immediate [63:0] $end
$var wire 1 Q ID_EX_Branch $end
$var wire 1 R ID_EX_ALUSrc $end
$var wire 2 S ID_EX_ALUOp [1:0] $end
$var wire 2 T Forward_B [1:0] $end
$var wire 2 U Forward_A [1:0] $end
$var wire 5 V EX_MEM_rd [4:0] $end
$var wire 1 W EX_MEM_Zero $end
$var wire 1 X EX_MEM_RegWrite $end
$var wire 64 Y EX_MEM_PC_Adder [63:0] $end
$var wire 1 Z EX_MEM_MemtoReg $end
$var wire 1 [ EX_MEM_MemWrite $end
$var wire 1 \ EX_MEM_MemRead $end
$var wire 64 ] EX_MEM_MUX_ForwardB [63:0] $end
$var wire 1 ^ EX_MEM_Branch $end
$var wire 64 _ EX_MEM_ALU_Out [63:0] $end
$var wire 1 ` Branch $end
$var wire 1 a ALUSrc $end
$var wire 2 b ALUOp [1:0] $end
$scope module ALU64 $end
$var wire 3 c funct3 [2:0] $end
$var wire 4 d Operation [3:0] $end
$var wire 64 e B [63:0] $end
$var wire 64 f A [63:0] $end
$var reg 64 g O [63:0] $end
$var reg 1 $ Zero $end
$upscope $end
$scope module DMem $end
$var wire 1 ! clk $end
$var wire 64 h WriteData [63:0] $end
$var wire 64 i Mem_Addr [63:0] $end
$var wire 1 [ MemWrite $end
$var wire 1 \ MemRead $end
$var reg 64 j Read_Data [63:0] $end
$upscope $end
$scope module Igen $end
$var wire 32 k instruction [31:0] $end
$var wire 64 l immed_value [63:0] $end
$scope module m1 $end
$var wire 64 m A [63:0] $end
$var wire 64 n B [63:0] $end
$var wire 64 o C [63:0] $end
$var wire 2 p S [1:0] $end
$var wire 64 q O [63:0] $end
$upscope $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 64 r PC_In [63:0] $end
$var reg 64 s PC_Out [63:0] $end
$upscope $end
$scope module a14 $end
$var wire 1 @ S $end
$var wire 64 t O [63:0] $end
$var wire 64 u B [63:0] $end
$var wire 64 v A [63:0] $end
$upscope $end
$scope module ac1 $end
$var wire 4 w Funct [3:0] $end
$var wire 2 x ALUOp [1:0] $end
$var reg 4 y Operation [3:0] $end
$upscope $end
$scope module add1 $end
$var wire 64 z a [63:0] $end
$var wire 64 { b [63:0] $end
$var wire 64 | c [63:0] $end
$upscope $end
$scope module add2 $end
$var wire 64 } b [63:0] $end
$var wire 64 ~ c [63:0] $end
$var wire 64 !" a [63:0] $end
$upscope $end
$scope module add3 $end
$var wire 64 "" a [63:0] $end
$var wire 64 #" b [63:0] $end
$var wire 64 $" c [63:0] $end
$upscope $end
$scope module b3 $end
$var wire 64 %" ALU_Out [63:0] $end
$var wire 64 &" PC_Adder [63:0] $end
$var wire 1 $ Zero $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 64 '" MUX_ForwardB [63:0] $end
$var wire 5 (" ID_EX_rd [4:0] $end
$var wire 1 H ID_EX_RegWrite $end
$var wire 1 L ID_EX_MemtoReg $end
$var wire 1 M ID_EX_MemWrite $end
$var wire 1 N ID_EX_MemRead $end
$var wire 1 Q ID_EX_Branch $end
$var reg 64 )" EX_MEM_ALU_Out [63:0] $end
$var reg 1 ^ EX_MEM_Branch $end
$var reg 64 *" EX_MEM_MUX_ForwardB [63:0] $end
$var reg 1 \ EX_MEM_MemRead $end
$var reg 1 [ EX_MEM_MemWrite $end
$var reg 1 Z EX_MEM_MemtoReg $end
$var reg 64 +" EX_MEM_PC_Adder [63:0] $end
$var reg 1 X EX_MEM_RegWrite $end
$var reg 1 W EX_MEM_Zero $end
$var reg 5 ," EX_MEM_rd [4:0] $end
$upscope $end
$scope module b4 $end
$var wire 64 -" EX_MEM_ALU_Out [63:0] $end
$var wire 1 Z EX_MEM_MemtoReg $end
$var wire 1 X EX_MEM_RegWrite $end
$var wire 5 ." EX_MEM_rd [4:0] $end
$var wire 64 /" Read_Data [63:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var reg 64 0" MEM_WB_ALU_Out [63:0] $end
$var reg 1 @ MEM_WB_MemtoReg $end
$var reg 64 1" MEM_WB_Read_Data [63:0] $end
$var reg 1 > MEM_WB_RegWrite $end
$var reg 5 2" MEM_WB_rd [4:0] $end
$upscope $end
$scope module cu $end
$var wire 7 3" Opcode [6:0] $end
$var reg 2 4" ALUOp [1:0] $end
$var reg 1 a ALUSrc $end
$var reg 1 ` Branch $end
$var reg 1 ; MemRead $end
$var reg 1 : MemWrite $end
$var reg 1 9 MemtoReg $end
$var reg 1 1 RegWrite $end
$upscope $end
$scope module f1 $end
$var wire 1 X EX_MEM_RegWrite $end
$var wire 5 5" EX_MEM_rd [4:0] $end
$var wire 1 > MEM_WB_RegWrite $end
$var wire 5 6" MEM_WB_rd [4:0] $end
$var wire 5 7" ID_EX_rs2 [4:0] $end
$var wire 5 8" ID_EX_rs1 [4:0] $end
$var reg 2 9" Forward_A [1:0] $end
$var reg 2 :" Forward_B [1:0] $end
$upscope $end
$scope module iMem $end
$var wire 64 ;" Inst_address [63:0] $end
$var reg 32 <" Instruction [31:0] $end
$upscope $end
$scope module iParser $end
$var wire 32 =" instruction [31:0] $end
$var wire 5 >" rs2 [24:20] $end
$var wire 5 ?" rs1 [19:15] $end
$var wire 5 @" rd [11:7] $end
$var wire 7 A" opcode [6:0] $end
$var wire 7 B" funct7 [31:25] $end
$var wire 3 C" funct3 [14:12] $end
$upscope $end
$scope module id_ex $end
$var wire 1 a ALUSrc $end
$var wire 2 D" ALU_Op [1:0] $end
$var wire 1 ` Branch $end
$var wire 64 E" IF_ID_Immediate [63:0] $end
$var wire 4 F" IF_ID_Ins [3:0] $end
$var wire 5 G" IF_ID_rd [4:0] $end
$var wire 5 H" IF_ID_rs1 [4:0] $end
$var wire 5 I" IF_ID_rs2 [4:0] $end
$var wire 1 ; MemRead $end
$var wire 1 : MemWrite $end
$var wire 1 9 MemtoReg $end
$var wire 1 1 RegWrite $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 64 J" IF_ID_ReadData2 [63:0] $end
$var wire 64 K" IF_ID_ReadData1 [63:0] $end
$var wire 64 L" IF_ID_PC_Out [63:0] $end
$var reg 1 R ID_EX_ALUSrc $end
$var reg 2 M" ID_EX_ALU_Op [1:0] $end
$var reg 1 Q ID_EX_Branch $end
$var reg 64 N" ID_EX_Immediate [63:0] $end
$var reg 4 O" ID_EX_Ins [3:0] $end
$var reg 1 N ID_EX_MemRead $end
$var reg 1 M ID_EX_MemWrite $end
$var reg 1 L ID_EX_MemtoReg $end
$var reg 64 P" ID_EX_PC_Out [63:0] $end
$var reg 64 Q" ID_EX_ReadData1 [63:0] $end
$var reg 64 R" ID_EX_ReadData2 [63:0] $end
$var reg 1 H ID_EX_RegWrite $end
$var reg 5 S" ID_EX_rd [4:0] $end
$var reg 5 T" ID_EX_rs1 [4:0] $end
$var reg 5 U" ID_EX_rs2 [4:0] $end
$upscope $end
$scope module if_id $end
$var wire 32 V" Instruction [31:0] $end
$var wire 64 W" PC_Out [63:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var reg 32 X" IF_ID_Instruction [31:0] $end
$var reg 64 Y" IF_ID_PC_Out [63:0] $end
$upscope $end
$scope module muxBranch $end
$var wire 64 Z" B [63:0] $end
$var wire 1 R S $end
$var wire 64 [" O [63:0] $end
$var wire 64 \" A [63:0] $end
$upscope $end
$scope module muxBranch1 $end
$var wire 64 ]" A [63:0] $end
$var wire 64 ^" B [63:0] $end
$var wire 64 _" C [63:0] $end
$var wire 2 `" S [1:0] $end
$var wire 64 a" O [63:0] $end
$upscope $end
$scope module muxBranch2 $end
$var wire 64 b" A [63:0] $end
$var wire 64 c" B [63:0] $end
$var wire 64 d" C [63:0] $end
$var wire 2 e" S [1:0] $end
$var wire 64 f" O [63:0] $end
$upscope $end
$scope module muxMemory $end
$var wire 64 g" A [63:0] $end
$var wire 64 h" B [63:0] $end
$var wire 1 i" S $end
$var wire 64 j" O [63:0] $end
$upscope $end
$scope module rFile $end
$var wire 1 > RegWrite $end
$var wire 64 k" WriteData [63:0] $end
$var wire 1 ! clk $end
$var wire 5 l" rd [4:0] $end
$var wire 1 " reset $end
$var wire 5 m" rs1 [4:0] $end
$var wire 5 n" rs2 [4:0] $end
$var reg 64 o" ReadData1 [63:0] $end
$var reg 64 p" ReadData2 [63:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 p"
b0 o"
b11 n"
b10 m"
b0 l"
b0 k"
b100 j"
0i"
b0 h"
b100 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b0 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b1100010000000010110011 V"
b0 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b0 N"
b0 M"
b0 L"
b0 K"
b0 J"
b11 I"
b10 H"
b1 G"
b0 F"
b0 E"
b10 D"
b0 C"
b0 B"
b110011 A"
b1 @"
b10 ?"
b11 >"
b1100010000000010110011 ="
b1100010000000010110011 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b10 4"
b110011 3"
b0 2"
b0 1"
b0 0"
bx /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b100 $"
b0 #"
b100 ""
b0 !"
b0 ~
b0 }
b100 |
b0 {
b100 z
b10 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b100 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
bx j
b0 i
b0 h
b0 g
b0 f
b0 e
b10 d
b0 c
b10 b
0a
0`
b0 _
0^
b0 ]
0\
0[
0Z
b0 Y
0X
0W
b0 V
b0 U
b0 T
b0 S
0R
0Q
b0 P
b0 O
0N
0M
0L
b0 K
b0 J
b0 I
0H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
0@
b0 ?
0>
b0 =
b0 <
0;
0:
09
b110011 8
b10 7
b100 6
b0 5
b0 4
b0 3
bx 2
11
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b1100010000000010110011 *
b0 )
b1 (
b0 '
b10 &
b11 %
1$
b100 #
1"
0!
$end
#5
1!
#10
b11 3
b11 h
b11 J"
b11 p"
b10 4
b10 K"
b10 o"
0!
0"
#15
0$
b0 4
b0 K"
b0 o"
b101 '
b101 g
b101 %"
b1 +
b1 l
b1 q
b1 E"
b10 (
b10 @"
b10 G"
b1 &
b1 ?"
b1 H"
b1 m"
b11 0
b11 e
b11 ["
b1000 6
b1000 r
b1000 j"
b1100001000000100110011 *
b1100001000000100110011 <"
b1100001000000100110011 ="
b1100001000000100110011 V"
b1 p
b10000000000 o
b1 n
b11 m
b11 .
b11 '"
b11 \"
b11 f"
b10 /
b10 f
b10 a"
b1000 #
b1000 |
b1000 $"
b1000 g"
b100 5
b100 s
b100 {
b100 #"
b100 ;"
b100 W"
b1100010000000010110011 D
b1100010000000010110011 k
b1100010000000010110011 X"
bx ?
bx u
bx 1"
b1 <
b1 2"
b1 6"
b1 l"
1>
1X
b1 V
b1 ,"
b1 ."
b1 5"
1W
b11 I
b11 R"
b11 b"
b10 J
b10 Q"
b10 ]"
b1 G
b1 ("
b1 S"
b11 E
b11 7"
b11 U"
b10 F
b10 8"
b10 T"
1H
b10 S
b10 x
b10 M"
1!
#20
0!
#25
b0 3
b0 h
b0 J"
b0 p"
b1000 '
b1000 g
b1000 %"
b10 +
b10 l
b10 q
b10 E"
b0 b
b0 4"
b0 D"
1a
b10011 8
b10011 3"
b10011 A"
b11 (
b11 @"
b11 G"
b1 %
b1 >"
b1 I"
b1 n"
b1 o
b10 n
b1100 6
b1100 r
b1100 j"
b100001000000110010011 *
b100001000000110010011 <"
b100001000000110010011 ="
b100001000000110010011 V"
b101 /
b101 f
b101 a"
b10 )
b10 ~
b10 &"
b10 }
b10 U
b10 9"
b10 `"
b1000 B
b1000 L"
b1000 Y"
b1100001000000100110011 D
b1100001000000100110011 k
b1100001000000100110011 X"
b1100 #
b1100 |
b1100 $"
b1100 g"
b1000 5
b1000 s
b1000 {
b1000 #"
b1000 ;"
b1000 W"
b0 J
b0 Q"
b0 ]"
b1 P
b1 N"
b1 Z"
b10 G
b10 ("
b10 S"
b1 F
b1 8"
b1 T"
b101 _
b101 i
b101 )"
b101 -"
b101 _"
b101 d"
b11 ]
b11 *"
0W
1!
#30
0!
#35
bx 3
bx h
bx J"
bx p"
bx 4
bx K"
bx o"
b10 '
b10 g
b10 %"
01
0a
bx 8
bx 3"
bx A"
bx (
bx @"
bx G"
bx -
bx c
bx C"
bx &
bx ?"
bx H"
bx m"
bx %
bx >"
bx I"
bx n"
bx ,
bx B"
b1 +
b1 l
b1 q
b1 E"
b0 /
b0 f
b0 a"
b10 0
b10 e
b10 ["
b10000 6
b10000 r
b10000 j"
bx *
bx <"
bx ="
bx V"
b0 p
b10000000001 o
b11 n
b1 m
b1000 =
b1000 t
b1000 ^"
b1000 c"
b1000 k"
b0 .
b0 '"
b0 \"
b0 f"
b100 }
b0 U
b0 9"
b0 `"
b10000 #
b10000 |
b10000 $"
b10000 g"
b1100 5
b1100 s
b1100 {
b1100 #"
b1100 ;"
b1100 W"
b100001000000110010011 D
b100001000000110010011 k
b100001000000110010011 X"
b1000 A
b1000 v
b1000 0"
b11 <
b11 2"
b11 6"
b11 l"
b1010 Y
b1010 +"
b1010 h"
b1000 _
b1000 i
b1000 )"
b1000 -"
b1000 _"
b1000 d"
b11 V
b11 ,"
b11 ."
b11 5"
b1100 )
b1100 ~
b1100 &"
b1000 K
b1000 !"
b1000 P"
b0 I
b0 R"
b0 b"
b10 P
b10 N"
b10 Z"
b11 G
b11 ("
b11 S"
b1 E
b1 7"
b1 U"
1R
b0 S
b0 x
b0 M"
1!
#40
0!
#45
bx '
bx g
bx %"
bx +
bx l
bx q
bx E"
bx p
bx o
bx n
bx m
bx C
bx F"
b10100 6
b10100 r
b10100 j"
bx .
bx '"
bx \"
bx f"
bx /
bx f
bx a"
bx 0
bx e
bx ["
b1010 )
b1010 ~
b1010 &"
b10 }
b10000 B
b10000 L"
b10000 Y"
bx D
bx k
bx X"
b10100 #
b10100 |
b10100 $"
b10100 g"
b10000 5
b10000 s
b10000 {
b10000 #"
b10000 ;"
b10000 W"
bx I
bx R"
bx b"
bx J
bx Q"
bx ]"
b1 P
b1 N"
b1 Z"
bx G
bx ("
bx S"
bx E
bx 7"
bx U"
bx F
bx 8"
bx T"
0H
0R
b1100 Y
b1100 +"
b1100 h"
b10 _
b10 i
b10 )"
b10 -"
b10 _"
b10 d"
b0 ]
b0 *"
1!
#50
0!
#55
b11000 6
b11000 r
b11000 j"
bx =
bx t
bx ^"
bx c"
bx k"
bx0 }
b11000 #
b11000 |
b11000 $"
b11000 g"
b10100 5
b10100 s
b10100 {
b10100 #"
b10100 ;"
b10100 W"
bx A
bx v
bx 0"
bx <
bx 2"
bx 6"
bx l"
0>
0X
b10010 Y
b10010 +"
b10010 h"
bx _
bx i
bx )"
bx -"
bx _"
bx d"
bx ]
bx *"
bx V
bx ,"
bx ."
bx 5"
bx )
bx ~
bx &"
b10000 K
b10000 !"
b10000 P"
bx P
bx N"
bx Z"
bx O
bx w
bx O"
1!
#60
0!
#65
b11100 6
b11100 r
b11100 j"
b11000 B
b11000 L"
b11000 Y"
b11100 #
b11100 |
b11100 $"
b11100 g"
b11000 5
b11000 s
b11000 {
b11000 #"
b11000 ;"
b11000 W"
bx Y
bx +"
bx h"
1!
#70
0!
#75
b100000 6
b100000 r
b100000 j"
b100000 #
b100000 |
b100000 $"
b100000 g"
b11100 5
b11100 s
b11100 {
b11100 #"
b11100 ;"
b11100 W"
b11000 K
b11000 !"
b11000 P"
1!
#80
0!
#85
b100100 6
b100100 r
b100100 j"
b100000 B
b100000 L"
b100000 Y"
b100100 #
b100100 |
b100100 $"
b100100 g"
b100000 5
b100000 s
b100000 {
b100000 #"
b100000 ;"
b100000 W"
1!
#90
0!
#95
b101000 6
b101000 r
b101000 j"
b101000 #
b101000 |
b101000 $"
b101000 g"
b100100 5
b100100 s
b100100 {
b100100 #"
b100100 ;"
b100100 W"
b100000 K
b100000 !"
b100000 P"
1!
#100
0!
